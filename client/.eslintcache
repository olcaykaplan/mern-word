[{"F:\\Git Proje\\mern-words\\client\\src\\index.js":"1","F:\\Git Proje\\mern-words\\client\\src\\App.js":"2","F:\\Git Proje\\mern-words\\client\\src\\reducers\\index.js":"3","F:\\Git Proje\\mern-words\\client\\src\\reducers\\words.js":"4","F:\\Git Proje\\mern-words\\client\\src\\constants\\actionTypes.js":"5","F:\\Git Proje\\mern-words\\client\\src\\actions\\wordsAction.js":"6","F:\\Git Proje\\mern-words\\client\\src\\api\\index.js":"7","F:\\Git Proje\\mern-words\\client\\src\\components\\Words\\Words.js":"8","F:\\Git Proje\\mern-words\\client\\src\\layouts\\Navigation\\AppBar.js":"9","F:\\Git Proje\\mern-words\\client\\src\\components\\Words\\Word\\Word.js":"10","F:\\Git Proje\\mern-words\\client\\src\\components\\WordForm\\WordForm.js":"11","F:\\Git Proje\\mern-words\\client\\src\\components\\UploadWordsCollectively\\UploadWordsCollectively.js":"12","F:\\Git Proje\\mern-words\\client\\src\\components\\UI Components\\NewTextArea\\NewTextArea.js":"13"},{"size":560,"mtime":1610232014255,"results":"14","hashOfConfig":"15"},{"size":1233,"mtime":1610290339675,"results":"16","hashOfConfig":"15"},{"size":115,"mtime":1610147617994,"results":"17","hashOfConfig":"15"},{"size":349,"mtime":1610206215676,"results":"18","hashOfConfig":"15"},{"size":90,"mtime":1610206113468,"results":"19","hashOfConfig":"15"},{"size":883,"mtime":1610357186861,"results":"20","hashOfConfig":"15"},{"size":309,"mtime":1610317445984,"results":"21","hashOfConfig":"15"},{"size":501,"mtime":1610233697841,"results":"22","hashOfConfig":"15"},{"size":952,"mtime":1611514637665,"results":"23","hashOfConfig":"15"},{"size":1351,"mtime":1610235681984,"results":"24","hashOfConfig":"15"},{"size":3896,"mtime":1611519462031,"results":"25","hashOfConfig":"15"},{"size":4182,"mtime":1610819482879,"results":"26","hashOfConfig":"15"},{"size":1472,"mtime":1611518462830,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"8kfnzr",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Git Proje\\mern-words\\client\\src\\index.js",[],["60","61"],"F:\\Git Proje\\mern-words\\client\\src\\App.js",["62","63"],"import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getWords} from './actions/wordsAction';\r\nimport {Switch, Route, NavLink, Link, Redirect} from 'react-router-dom';\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\nimport AppBar  from './layouts/Navigation/AppBar';\r\nimport WordForm from './components/WordForm/WordForm';\r\nimport  Words from './components/Words/Words';\r\nimport UploadWordsCollectively from \"./components/UploadWordsCollectively/UploadWordsCollectively\";\r\n\r\nconst App = () =>  {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getWords());\r\n    }, [dispatch])\r\n\r\n        return (\r\n            <Container >\r\n                <AppBar />\r\n                <Switch>\r\n                    <Route  path={\"/words\"} exact component={Words} />\r\n                    <Route path={\"/words/word/newWord\"} component={WordForm} />\r\n                    <Route path={\"/words/word/:wordID\"} exact  component={WordForm} />\r\n                    <Route path={\"/words/uploadWords\"} exact  component = {UploadWordsCollectively} />\r\n                    <Redirect to={\"/words\"}  />\r\n                </Switch>\r\n            </Container>\r\n        );\r\n\r\n}\r\n\r\nexport default App;","F:\\Git Proje\\mern-words\\client\\src\\reducers\\index.js",[],"F:\\Git Proje\\mern-words\\client\\src\\reducers\\words.js",["64"],"import * as actionTypes from '../constants/actionTypes';\r\n\r\nexport default (words = [], action) => {\r\n    switch (action.type){\r\n        case actionTypes.FETCH_WORDS:\r\n            return action.payload;\r\n        case actionTypes.CREATE_NEW_WORD:\r\n            return [...words, action.payload];\r\n        default:\r\n            return  words;\r\n    }\r\n}","F:\\Git Proje\\mern-words\\client\\src\\constants\\actionTypes.js",[],"F:\\Git Proje\\mern-words\\client\\src\\actions\\wordsAction.js",[],"F:\\Git Proje\\mern-words\\client\\src\\api\\index.js",[],"F:\\Git Proje\\mern-words\\client\\src\\components\\Words\\Words.js",["65"],"import React from \"react\";\r\nimport { useSelector} from'react-redux';\r\nimport  Word from './Word/Word';\r\nimport classes from './Words.module.css';\r\nimport {Container} from \"react-bootstrap\";\r\nconst Words = (props) => {\r\n    const words = useSelector((state) => state.words);\r\n\r\n    return (\r\n        <div  className={classes.wordList}>\r\n            {words.map((word, index) => (\r\n               < Word word={word} index ={index} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Words;\r\n","F:\\Git Proje\\mern-words\\client\\src\\layouts\\Navigation\\AppBar.js",[],"F:\\Git Proje\\mern-words\\client\\src\\components\\Words\\Word\\Word.js",["66"],"import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Card, Button,} from 'react-bootstrap';\r\nimport logo from '../../../logo192.png';\r\nimport classes from './Words.module.css';\r\n\r\nimport {withRouter} from 'react-router-dom';\r\nconst Word = ({word, index, history}) => {\r\n//const Word = (props) => {\r\n    const cardsColor= ['success', 'warning', 'info' ];\r\n    const  variant =  cardsColor[index%cardsColor.length];;\r\n\r\n    const handleClick = () => {\r\n        history.push(`/words/word/${word._id}`);\r\n    }\r\n    return(\r\n\r\n            <Card\r\n                bg={variant.toLowerCase()}\r\n                key={word._id}\r\n                text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                className={[\"mb-2\", classes.Card]}\r\n            >\r\n                <Card.Header><b>Lern Up</b></Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title> {word.name} </Card.Title>\r\n                    <hr/>\r\n                    <Card.Text>\r\n                        {word.description}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                <Button >Details</Button>\r\n                <Button onClick={handleClick}>Update</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport  default  withRouter(Word);\r\n","F:\\Git Proje\\mern-words\\client\\src\\components\\WordForm\\WordForm.js",["67","68","69","70"],"F:\\Git Proje\\mern-words\\client\\src\\components\\UploadWordsCollectively\\UploadWordsCollectively.js",["71","72","73","74","75","76"],"import React, {useState} from \"react\";\r\nimport * as XLSX from 'xlsx';\r\nimport {Container, Form, Table, Button} from \"react-bootstrap\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {uploadWordsCollectively} from '../../actions/wordsAction';\r\n\r\nconst UploadWordsCollectively = () =>  {\r\n    const [selectedFile, setSelectedFile] = useState('');\r\n    const [uploadWords, setUploadWords] = useState([]);\r\n    const [headers, setHeader] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const readExcel = (e) => {\r\n\r\n\r\n      //  console.log(\"files 0\",e.target.files[0]);\r\n       // console.log(\"result\",e.target.result);\r\n       // const file = e.target.files[0];\r\n        const file =  {...selectedFile.name};\r\n        console.log(file);\r\n      /* const promise = new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsArrayBuffer(file);\r\n\r\n            fileReader.onload = (e) =>{\r\n                console.log(\"result in fnc \",e.target.result);\r\n                const bufferArray = e.target.result;\r\n                const  workbook = XLSX.read(bufferArray, {type:'buffer'});\r\n                const worksheetName= workbook.SheetNames[0];\r\n                const workseet = workbook.Sheets[worksheetName];\r\n                const  data = XLSX.utils.sheet_to_json(workseet);\r\n                resolve(data);\r\n            };\r\n            fileReader.onerror = (err) => {\r\n                reject(err);\r\n            }\r\n        });\r\n\r\n        setSelectedFile(null);\r\n\r\n        promise.then((items) => {\r\n\r\n           // dispatch(uploadWordsCollectively(items));\r\n             const aryHeader = [];\r\n              Object.getOwnPropertyNames(items[0]).map((x, index) => {\r\n                  if (index === 0) return\r\n                  aryHeader.push(x);\r\n              })\r\n              setHeader(aryHeader);\r\n              setUploadWords(items);\r\n        });*/\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <p className=\"mt-5 mb-3\">Choose The Uploading File (name, description, examples) </p>\r\n                <Form.File\r\n                    id=\"custom-file\"\r\n                    label=\"Custom file input\"\r\n                    className={\"mb-5\"}\r\n                    custom\r\n                    onChange={(e) => setSelectedFile({name: e.target.files[0]}) }\r\n                />\r\n                <Button type={\"submit\"} onClick={readExcel} >Upload</Button>\r\n            {/* Example FILE HERE*/}\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <th>Uploading Fields</th>\r\n                    <th>Fields</th>\r\n                    <th>Matches</th>\r\n                </thead>\r\n                <tbody>\r\n                    {headers.map(h => (\r\n                      <tr>\r\n                          <td>{h}</td>\r\n                          <td><select className=\"form-control\" id=\"exampleFormControlSelect1\">\r\n                              <option>1</option>\r\n                              <option>2</option>\r\n                              <option>3</option>\r\n                              <option>4</option>\r\n                              <option>5</option>\r\n                          </select></td>\r\n                          <td></td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            {/* HEADERS ARE MATCHED OR NOT (FORM)\r\n              <h2>YOUR UPLOAD FILE</h2>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    {headers.map(header => (\r\n                        <th> {header}</th>\r\n                    ))}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {uploadWords.map((word, index) => (\r\n                    <tr>\r\n                        <td>{index+1}</td>\r\n                        <td>{word.deneme}</td>\r\n                        <td>{word.ad}</td>\r\n                        <td>{word.soyad}</td>\r\n                    </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table> */}\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default UploadWordsCollectively;","F:\\Git Proje\\mern-words\\client\\src\\components\\UI Components\\NewTextArea\\NewTextArea.js",["77","78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":4,"column":24,"nodeType":"86","messageId":"87","endLine":4,"endColumn":31},{"ruleId":"84","severity":1,"message":"88","line":4,"column":33,"nodeType":"86","messageId":"87","endLine":4,"endColumn":37},{"ruleId":"89","severity":1,"message":"90","line":3,"column":1,"nodeType":"91","endLine":12,"endColumn":2},{"ruleId":"84","severity":1,"message":"92","line":5,"column":9,"nodeType":"86","messageId":"87","endLine":5,"endColumn":18},{"ruleId":"84","severity":1,"message":"93","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":12},{"ruleId":"84","severity":1,"message":"94","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"95","line":7,"column":8,"nodeType":"86","messageId":"87","endLine":7,"endColumn":13},{"ruleId":"84","severity":1,"message":"96","line":16,"column":11,"nodeType":"86","messageId":"87","endLine":16,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":16,"column":83,"nodeType":"99","messageId":"100","endLine":16,"endColumn":85},{"ruleId":"84","severity":1,"message":"101","line":2,"column":13,"nodeType":"86","messageId":"87","endLine":2,"endColumn":17},{"ruleId":"84","severity":1,"message":"102","line":5,"column":9,"nodeType":"86","messageId":"87","endLine":5,"endColumn":32},{"ruleId":"84","severity":1,"message":"103","line":9,"column":12,"nodeType":"86","messageId":"87","endLine":9,"endColumn":23},{"ruleId":"84","severity":1,"message":"104","line":9,"column":25,"nodeType":"86","messageId":"87","endLine":9,"endColumn":39},{"ruleId":"84","severity":1,"message":"105","line":10,"column":21,"nodeType":"86","messageId":"87","endLine":10,"endColumn":30},{"ruleId":"84","severity":1,"message":"106","line":11,"column":11,"nodeType":"86","messageId":"87","endLine":11,"endColumn":19},{"ruleId":"84","severity":1,"message":"107","line":2,"column":9,"nodeType":"86","messageId":"87","endLine":2,"endColumn":13},{"ruleId":"84","severity":1,"message":"108","line":4,"column":9,"nodeType":"86","messageId":"87","endLine":4,"endColumn":14},{"ruleId":"84","severity":1,"message":"109","line":6,"column":7,"nodeType":"86","messageId":"87","endLine":6,"endColumn":25},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Container' is defined but never used.","'logo' is defined but never used.","'useEffect' is defined but never used.","'words' is defined but never used.","'wordData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'XLSX' is defined but never used.","'uploadWordsCollectively' is defined but never used.","'uploadWords' is assigned a value but never used.","'setUploadWords' is assigned a value but never used.","'setHeader' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Form' is defined but never used.","'green' is defined but never used.","'examplePlaceHolder' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]