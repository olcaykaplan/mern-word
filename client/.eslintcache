[{"F:\\Git Proje\\mern-word\\client\\src\\index.js":"1","F:\\Git Proje\\mern-word\\client\\src\\App.js":"2","F:\\Git Proje\\mern-word\\client\\src\\reducers\\index.js":"3","F:\\Git Proje\\mern-word\\client\\src\\actions\\wordsAction.js":"4","F:\\Git Proje\\mern-word\\client\\src\\layouts\\Navigation\\AppBar.js":"5","F:\\Git Proje\\mern-word\\client\\src\\components\\WordForm\\WordForm.js":"6","F:\\Git Proje\\mern-word\\client\\src\\components\\UploadWordsCollectively\\UploadWordsCollectively.js":"7","F:\\Git Proje\\mern-word\\client\\src\\components\\Words\\Words.js":"8","F:\\Git Proje\\mern-word\\client\\src\\reducers\\words.js":"9","F:\\Git Proje\\mern-word\\client\\src\\constants\\actionTypes.js":"10","F:\\Git Proje\\mern-word\\client\\src\\components\\Words\\Word\\Word.js":"11","F:\\Git Proje\\mern-word\\client\\src\\components\\UI Components\\NewTextArea\\NewTextArea.js":"12","F:\\Git Proje\\mern-word\\client\\src\\api\\index.js":"13","F:\\Git Proje\\mern-word\\client\\src\\components\\Auth\\Auth.js":"14","F:\\Git Proje\\mern-word\\client\\src\\components\\UI Components\\Input\\Input.js":"15","F:\\Git Proje\\mern-word\\client\\src\\components\\Auth\\iconGoogle.js":"16","F:\\Git Proje\\mern-word\\client\\src\\reducers\\auth.js":"17","F:\\Git Proje\\mern-word\\client\\src\\actions\\auth.js":"18"},{"size":560,"mtime":1610232014255,"results":"19","hashOfConfig":"20"},{"size":1346,"mtime":1612720189893,"results":"21","hashOfConfig":"20"},{"size":151,"mtime":1612390376537,"results":"22","hashOfConfig":"20"},{"size":883,"mtime":1612302531722,"results":"23","hashOfConfig":"20"},{"size":5664,"mtime":1613258068149,"results":"24","hashOfConfig":"20"},{"size":3896,"mtime":1611519462031,"results":"25","hashOfConfig":"20"},{"size":4182,"mtime":1610819482879,"results":"26","hashOfConfig":"20"},{"size":501,"mtime":1610233697841,"results":"27","hashOfConfig":"20"},{"size":349,"mtime":1610206215676,"results":"28","hashOfConfig":"20"},{"size":152,"mtime":1612390151036,"results":"29","hashOfConfig":"20"},{"size":1351,"mtime":1610235681984,"results":"30","hashOfConfig":"20"},{"size":1472,"mtime":1611862969345,"results":"31","hashOfConfig":"20"},{"size":501,"mtime":1613227470477,"results":"32","hashOfConfig":"20"},{"size":4517,"mtime":1613255186629,"results":"33","hashOfConfig":"20"},{"size":1119,"mtime":1612718418007,"results":"34","hashOfConfig":"20"},{"size":514,"mtime":1612389223649,"results":"35","hashOfConfig":"20"},{"size":496,"mtime":1612391955446,"results":"36","hashOfConfig":"20"},{"size":710,"mtime":1613255303734,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"eqrtp8",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"F:\\Git Proje\\mern-word\\client\\src\\index.js",[],["85","86"],"F:\\Git Proje\\mern-word\\client\\src\\App.js",["87","88"],"import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getWords} from './actions/wordsAction';\r\nimport {Switch, Route, NavLink, Link, Redirect} from 'react-router-dom';\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\nimport AppBar  from './layouts/Navigation/AppBar';\r\nimport WordForm from './components/WordForm/WordForm';\r\nimport  Words from './components/Words/Words';\r\nimport UploadWordsCollectively from \"./components/UploadWordsCollectively/UploadWordsCollectively\";\r\nimport Auth from './components/Auth/Auth';\r\n\r\nconst App = () =>  {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getWords());\r\n    }, [dispatch])\r\n\r\n        return (\r\n            <Container >\r\n                <AppBar />\r\n                <Switch>\r\n                    <Route  path={\"/words\"} exact component={Words} />\r\n                    <Route path={\"/words/word/newWord\"} component={WordForm} />\r\n                    <Route path={\"/words/word/:wordID\"} exact  component={WordForm} />\r\n                    <Route path={\"/words/uploadWords\"} exact  component = {UploadWordsCollectively} />\r\n                    <Route path={\"/auth\"} exact component={Auth} />\r\n                    <Redirect to={\"/words\"}  />\r\n                </Switch>\r\n            </Container>\r\n        );\r\n\r\n}\r\n\r\nexport default App;","F:\\Git Proje\\mern-word\\client\\src\\reducers\\index.js",[],"F:\\Git Proje\\mern-word\\client\\src\\actions\\wordsAction.js",[],"F:\\Git Proje\\mern-word\\client\\src\\layouts\\Navigation\\AppBar.js",["89","90","91"],"import React, {useState, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport classes from './AppBar.module.css';\r\nimport decode from 'jwt-decode';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import AppBar from '@material-ui/core/AppBar';\r\n// import Toolbar from '@material-ui/core/Toolbar';\r\n// import Typography from '@material-ui/core/Typography';\r\n//import IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n// import {Button} from '@material-ui/core'\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n// import Menu from '@material-ui/core/Menu';\r\nimport {AppBar, Toolbar, IconButton, Button, Typography, Menu, MenuItem} from \"@material-ui/core\" \r\n   \r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginBottom: \"35px\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      color: \"darkorange\",\r\n      fontWeight:\"bold\",\r\n      margin:\"5px\",\r\n    },\r\n    button:{\r\n        marginRight:\"15px\"\r\n    }\r\n  }));\r\n\r\nconst AppBarComponent = () => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const logout = () => {\r\n        dispatch({type: 'LOGOUT'});\r\n        history.push('/words');\r\n        setUser(null)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const token = user?.token;\r\n        if(token) {\r\n            const docededToken = decode(token);\r\n            if(docededToken.exp * 1000 < new Date().getTime()) logout();\r\n        }\r\n        setUser(JSON.parse(localStorage.getItem('profile')))\r\n    }, [location])\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    \r\n    const handleMenu = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    return (\r\n          <div className={classes.root}>\r\n              <AppBar position=\"static\" color=\"default\">\r\n                <Toolbar>\r\n                  <Typography variant=\"h6\" className={classes.title}>\r\n                    Learn<sup >UP</sup>\r\n                  </Typography>\r\n                  {user ? (\r\n                    <div>\r\n                    <AccountCircle />\r\n                      <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleMenu}\r\n                        color=\"inherit\"\r\n                      >\r\n                       <MenuIcon />\r\n                     \r\n                      </IconButton>\r\n                      <Menu\r\n                        id=\"menu-appbar\"\r\n                        anchorEl={anchorEl}\r\n                        anchorOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'right',\r\n                        }}\r\n                        keepMounted\r\n                        transformOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'right',\r\n                        }}\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                      >\r\n                          <MenuItem\r\n                              onClick={handleClose}\r\n                              containerElement={<Link to=\"/logout\" />}\r\n                              primaryText=\"Profile\"\r\n                              // leftIcon={\r\n                              //     <FontIcon className=\"material-icons\">people</FontIcon>\r\n                              // }\r\n                          >Deneme</MenuItem>\r\n                        <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                        <MenuItem onClick={handleClose}>My account</MenuItem>\r\n                        <MenuItem onClick={handleClose}>My Favourite Words</MenuItem>\r\n                        <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n                        <Button component={Link} to={'/words'} variant=\"contained\" size=\"small\" color=\"primary\">\r\n                        Words\r\n                    </Button>    \r\n                      </Menu>\r\n                    </div> ) :(\r\n                    <div>\r\n                    <Button component={Link} to={'/auth'} variant=\"contained\" size=\"small\" color=\"primary\" className={classes.button}>\r\n                        Login\r\n                    </Button>\r\n                    </div>\r\n                  )}\r\n                </Toolbar>\r\n              </AppBar>\r\n            </div>                        \r\n    )\r\n}\r\n\r\nexport default  AppBarComponent;\r\n\r\n{/* <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n           <NavLink to={'/words'} className={classes.NavLink}>Words</NavLink>\r\n           <NavLink to={'/'} className={classes.NavLink}></NavLink>\r\n            <NavLink to={'/words/word/newWord'} className={classes.NavLink}>New Word</NavLink>\r\n            <NavLink to={'/words/uploadWords'} className={classes.NavLink}>Upload Words</NavLink>\r\n\r\n       </Nav>\r\n       <Form inline>\r\n           <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n             <Button variant=\"outline-light\">Search</Button>\r\n        </Form>\r\n     </Navbar> */}","F:\\Git Proje\\mern-word\\client\\src\\components\\WordForm\\WordForm.js",["92","93","94","95"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Container, Form,} from 'react-bootstrap';\r\nimport classes from './WordForm.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createWord} from \"../../actions/wordsAction\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport words from \"../../reducers/words\";\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport NewTextArea from '../UI Components/NewTextArea/NewTextArea';\r\n\r\nconst WordForm  =  ({match}) => {\r\n    const [wordState, setWordState] = useState({name:'', description:'', examples:[]});\r\n  const [examples, setExamples]=useState([]);\r\n    const dispatch =  useDispatch();\r\n    const wordID = match.params.wordID;\r\n    const wordData =   useSelector((state) => wordID ? state.words.find(w => w._id==wordID): null);\r\n    const [count, setCount] = useState(0);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(createWord(wordState));\r\n        clearForm();\r\n    }\r\n\r\n    const clearForm = () => {\r\n       // setWordState({name:'', description:'', examples:[]})\r\n        console.table(wordState.examples);\r\n    }\r\n\r\n    const  addTextArea = () => {\r\n        let newText = <NewTextArea index={count} exampleValue={wordState.examples[count]} setWordState={setWordState} wordState={wordState}  removeExample ={() => removeExample(count)} />\r\n        examples.push(newText);\r\n        //Count will help to find target example in the array.\r\n        setCount(count+1)\r\n\r\n    }\r\n    const removeExample = (index) => {\r\n        // Edit UI Examples textarea array\r\n        alert(index);\r\n        const newExamplesUI = examples.filter((ex, i ) => i !== index);\r\n        setExamples(newExamplesUI);\r\n\r\n        //Edit wordState example array\r\n        const newExamples = wordState.examples.filter((ex, i) => i !== index);\r\n        console.log(\" 47 satır NEW EXAMPLES \",newExamples);\r\n        setWordState({\r\n            ...wordState, examples: newExamples\r\n        });\r\n    }\r\n\r\n          // UPDATE OPERATION WILL TRIGGER HERE\r\n    return(\r\n         <Container className={classes.container}>\r\n            <Form className={classes.formbody} onSubmit={handleSubmit}>\r\n                <h2>ADD NEW WORD</h2>\r\n                <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Word Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Word Name\"\r\n                         value={wordState.name}\r\n                         onChange={(e) => setWordState({...wordState, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group id={\"examples\"} controlId=\"exampleForm.ControlTextarea1\">\r\n\r\n                    <Form.Label>Word Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} placeholder=\"Describe it\"\r\n                          value={wordState.description}\r\n                          onChange={(e) => setWordState({...wordState, description: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n\r\n       <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n           {/*  New Example BUTTON HERE  +++  */ }\r\n           {/* ADD DYNAMIC TEXTAREA EXAMPLE   +++   */}\r\n           {/* REMOVE DYNAMIC TEXTAREA EXAMPLE --- */}\r\n        <Form.Label><AddCircleOutlineIcon style={{ color: green[500], fontSize:30, marginBottom: \"15px\" }} onClick={addTextArea}/> New Example</Form.Label>\r\n           {\r\n               examples.map(t => (\r\n                   t\r\n               ))\r\n\r\n           }\r\n       </Form.Group>\r\n    <Button variant={'primary'} type={'submit'} size={\"lg\"} >Create </Button>\r\n    <Button variant={'primary'} type={'button'} size={\"lg\"} onClick={clearForm}>Clear</Button>\r\n    {/* CLEAR BUTTON HERE */ }\r\n</Form>\r\n</Container>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default WordForm;\r\n","F:\\Git Proje\\mern-word\\client\\src\\components\\UploadWordsCollectively\\UploadWordsCollectively.js",["96","97","98","99","100","101"],"import React, {useState} from \"react\";\r\nimport * as XLSX from 'xlsx';\r\nimport {Container, Form, Table, Button} from \"react-bootstrap\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {uploadWordsCollectively} from '../../actions/wordsAction';\r\n\r\nconst UploadWordsCollectively = () =>  {\r\n    const [selectedFile, setSelectedFile] = useState('');\r\n    const [uploadWords, setUploadWords] = useState([]);\r\n    const [headers, setHeader] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const readExcel = (e) => {\r\n\r\n\r\n      //  console.log(\"files 0\",e.target.files[0]);\r\n       // console.log(\"result\",e.target.result);\r\n       // const file = e.target.files[0];\r\n        const file =  {...selectedFile.name};\r\n        console.log(file);\r\n      /* const promise = new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsArrayBuffer(file);\r\n\r\n            fileReader.onload = (e) =>{\r\n                console.log(\"result in fnc \",e.target.result);\r\n                const bufferArray = e.target.result;\r\n                const  workbook = XLSX.read(bufferArray, {type:'buffer'});\r\n                const worksheetName= workbook.SheetNames[0];\r\n                const workseet = workbook.Sheets[worksheetName];\r\n                const  data = XLSX.utils.sheet_to_json(workseet);\r\n                resolve(data);\r\n            };\r\n            fileReader.onerror = (err) => {\r\n                reject(err);\r\n            }\r\n        });\r\n\r\n        setSelectedFile(null);\r\n\r\n        promise.then((items) => {\r\n\r\n           // dispatch(uploadWordsCollectively(items));\r\n             const aryHeader = [];\r\n              Object.getOwnPropertyNames(items[0]).map((x, index) => {\r\n                  if (index === 0) return\r\n                  aryHeader.push(x);\r\n              })\r\n              setHeader(aryHeader);\r\n              setUploadWords(items);\r\n        });*/\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <p className=\"mt-5 mb-3\">Choose The Uploading File (name, description, examples) </p>\r\n                <Form.File\r\n                    id=\"custom-file\"\r\n                    label=\"Custom file input\"\r\n                    className={\"mb-5\"}\r\n                    custom\r\n                    onChange={(e) => setSelectedFile({name: e.target.files[0]}) }\r\n                />\r\n                <Button type={\"submit\"} onClick={readExcel} >Upload</Button>\r\n            {/* Example FILE HERE*/}\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <th>Uploading Fields</th>\r\n                    <th>Fields</th>\r\n                    <th>Matches</th>\r\n                </thead>\r\n                <tbody>\r\n                    {headers.map(h => (\r\n                      <tr>\r\n                          <td>{h}</td>\r\n                          <td><select className=\"form-control\" id=\"exampleFormControlSelect1\">\r\n                              <option>1</option>\r\n                              <option>2</option>\r\n                              <option>3</option>\r\n                              <option>4</option>\r\n                              <option>5</option>\r\n                          </select></td>\r\n                          <td></td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            {/* HEADERS ARE MATCHED OR NOT (FORM)\r\n              <h2>YOUR UPLOAD FILE</h2>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    {headers.map(header => (\r\n                        <th> {header}</th>\r\n                    ))}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {uploadWords.map((word, index) => (\r\n                    <tr>\r\n                        <td>{index+1}</td>\r\n                        <td>{word.deneme}</td>\r\n                        <td>{word.ad}</td>\r\n                        <td>{word.soyad}</td>\r\n                    </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table> */}\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default UploadWordsCollectively;","F:\\Git Proje\\mern-word\\client\\src\\components\\Words\\Words.js",["102"],"import React from \"react\";\r\nimport { useSelector} from'react-redux';\r\nimport  Word from './Word/Word';\r\nimport classes from './Words.module.css';\r\nimport {Container} from \"react-bootstrap\";\r\nconst Words = (props) => {\r\n    const words = useSelector((state) => state.words);\r\n\r\n    return (\r\n        <div  className={classes.wordList}>\r\n            {words.map((word, index) => (\r\n               < Word word={word} index ={index} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Words;\r\n","F:\\Git Proje\\mern-word\\client\\src\\reducers\\words.js",["103"],"import * as actionTypes from '../constants/actionTypes';\r\n\r\nexport default (words = [], action) => {\r\n    switch (action.type){\r\n        case actionTypes.FETCH_WORDS:\r\n            return action.payload;\r\n        case actionTypes.CREATE_NEW_WORD:\r\n            return [...words, action.payload];\r\n        default:\r\n            return  words;\r\n    }\r\n}","F:\\Git Proje\\mern-word\\client\\src\\constants\\actionTypes.js",[],"F:\\Git Proje\\mern-word\\client\\src\\components\\Words\\Word\\Word.js",["104"],"import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Card, Button,} from 'react-bootstrap';\r\nimport logo from '../../../logo192.png';\r\nimport classes from './Words.module.css';\r\n\r\nimport {withRouter} from 'react-router-dom';\r\nconst Word = ({word, index, history}) => {\r\n//const Word = (props) => {\r\n    const cardsColor= ['success', 'warning', 'info' ];\r\n    const  variant =  cardsColor[index%cardsColor.length];;\r\n\r\n    const handleClick = () => {\r\n        history.push(`/words/word/${word._id}`);\r\n    }\r\n    return(\r\n\r\n            <Card\r\n                bg={variant.toLowerCase()}\r\n                key={word._id}\r\n                text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                className={[\"mb-2\", classes.Card]}\r\n            >\r\n                <Card.Header><b>Lern Up</b></Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title> {word.name} </Card.Title>\r\n                    <hr/>\r\n                    <Card.Text>\r\n                        {word.description}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                <Button >Details</Button>\r\n                <Button onClick={handleClick}>Update</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport  default  withRouter(Word);\r\n","F:\\Git Proje\\mern-word\\client\\src\\components\\UI Components\\NewTextArea\\NewTextArea.js",["105","106","107"],"import React from 'react';\r\nimport {Form} from \"react-bootstrap\";\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport {green, red} from \"@material-ui/core/colors\";\r\nimport {Grid, InputLabel, TextField} from \"@material-ui/core\";\r\nconst examplePlaceHolder = \"\";\r\nconst NewTextArea = ({exampleValue, setWordState, wordState , index, removeExample} ) => {\r\n\r\n        const setChange = (e) => {\r\n            const updateWordState = {...wordState};\r\n            updateWordState.examples[index] = e.target.value;\r\n            setWordState(updateWordState);\r\n        }\r\n\r\n    return(\r\n        <Grid\r\n        container\r\n        lg={12}\r\n        >\r\n            <Grid item lg={1}>\r\n                <InputLabel><RemoveCircleOutlineIcon style={{ color: red[500], fontSize:30 }} onClick={removeExample} /> </InputLabel>\r\n            </Grid>\r\n\r\n            <Grid\r\n                item\r\n                lg={11}\r\n            >\r\n            <TextField key={index}\r\n                       variant={\"outlined\"}\r\n                       multiline\r\n                       fullWidth\r\n                       rows={3}\r\n                       rowsMax={3}\r\n                       placeholder={\"You can write more than one example. If you want to do, Click New Example\"}\r\n                       value={exampleValue}\r\n                       onChange={e => setChange(e)}\r\n            />\r\n            </Grid>\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default NewTextArea;","F:\\Git Proje\\mern-word\\client\\src\\api\\index.js",[],"F:\\Git Proje\\mern-word\\client\\src\\components\\Auth\\Auth.js",["108","109"],"import React, { useState} from 'react';\r\nimport {Container, Paper, Button, Grid, FormGroup } from \"@material-ui/core\";\r\nimport Input from '../UI Components/Input/Input';\r\nimport GoogleLogin from \"react-google-login\";\r\nimport IconGoogle from './iconGoogle';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {signup, signin} from \"../../actions/auth\";\r\nimport classes from './Auth.module.css'\r\n\r\nconst initialFormState= {\r\n    firstName:'',\r\n    lastName:'',\r\n    email:'',\r\n    password:'',\r\n    confirmPassword:''\r\n}\r\n\r\nconst Auth = () => {\r\n    const[formData, setFormData] = useState(initialFormState)\r\n    const [isSignup, setIsSignup] = useState(true);\r\n    const {showPassword, setShowPassword} = useState(false);\r\n    const  dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n    const handleAuthType = () => setIsSignup((prevAuthType) => !prevAuthType);\r\n    const handleShowPassword = () => setShowPassword((prevShowPassword) => !prevShowPassword);\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"form DATA\",formData)\r\n        if(isSignup){\r\n            console.log(\"signup çalıştı\", formData)\r\n            dispatch(signup(formData, history))\r\n        }\r\n        else{\r\n            console.log(\"signin çalıştı\", formData)\r\n            dispatch(signin(formData, history))\r\n        }\r\n    };\r\n    const handleChange = (e) => {\r\n        setFormData({...formData, [e.target.name] : e.target.value})\r\n    };\r\n\r\n    const googleSuccess = async (res) => {\r\n        const result  =  res?.profileObj;\r\n          const token = res?.tokenId;\r\n\r\n          try {\r\n            dispatch({ type:'AUTH', data: { result, token} })\r\n              history.push('/words');\r\n          }\r\n          catch (e) {\r\n              console.log(e);\r\n          }\r\n   };\r\n\r\n   const googleFailure =  (error) => {\r\n            console.log(error)\r\n            console.log(\"Google sign in was uncessful. Try again Later\")\r\n   };\r\n\r\n    return(\r\n        <Grid\r\n          container\r\n          xl={12}\r\n          lg={12}\r\n          md={12}\r\n          sm={12}\r\n          xs={12}\r\n          justify=\"center\"\r\n        >\r\n           <Grid   xl= \"6\" lg=\"6\"  md=\"6\"  sm=\"8\"  xs=\"10\" className={classes.GridContainer}  >\r\n            <Paper>\r\n                <form onSubmit={handleSubmit} className={classes.Form}>\r\n                    {isSignup && (\r\n                        <>\r\n                            <Input name={\"firstName\"} handleChange={handleChange} label={\"First Name\"} type={\"text\"}  autoFocus />\r\n                            <Input name={\"lastName\"} handleChange={handleChange} label={\"Last Name\"} type={\"text\"}   />\r\n                       </>\r\n\r\n                        )}\r\n                        <Input name={\"email\"} handleChange={handleChange} label={\"Email Address\"} type={\"email\"} />\r\n                        <Input name={\"password\"} handleChange={handleChange} label={\"Password\"} type={ showPassword ? \"text\" : \"password\"} handleShowPassword={handleShowPassword} />\r\n                        {isSignup &&\r\n                            <Input name={\"confirmPassword\"} handleChange={handleChange} label={\"Confirm Password\"}\r\n                                    type={\"password\"} />}\r\n                     <div className={classes.LoginSignUp}>\r\n                    <Button type=\"submit\"  variant=\"contained\" color=\"primary\">\r\n                        {isSignup ? 'Save': 'Login' }\r\n                    </Button>\r\n                    <Button onClick={handleAuthType}  size={\"medium\"} variant=\"contained\" color=\"secondary\">\r\n                        {isSignup ?  'Sign In' : 'Sign Up'}\r\n                    </Button>\r\n                    </div>\r\n                    <GoogleLogin\r\n                        clientId=\"446554799040-74lorsmc30g25o876eql2unk5gqbfoum.apps.googleusercontent.com\"\r\n                        render={(renderProps) => (\r\n                            <Button color=\"primary\" fullWidth onClick={renderProps.onClick} disabled={renderProps.disabled} startIcon={<IconGoogle />} variant={\"contained\"}>\r\n                            Google Sign In\r\n                            </Button>\r\n                        )}\r\n                        onSuccess={googleSuccess}\r\n                        onFailure={googleFailure}\r\n                        cookiePolicy={\"single_host_origin\"}\r\n                    />\r\n                </form>\r\n                </Paper>\r\n           </Grid>\r\n     </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default  Auth;","F:\\Git Proje\\mern-word\\client\\src\\components\\UI Components\\Input\\Input.js",["110"],"import React from 'react';\r\nimport {Grid, IconButton, InputAdornment, TextField} from \"@material-ui/core\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\n\r\nconst Input = (props) => {\r\n    const { name, handleChange, label,  half, autoFocus, type,  handleShowPassword,  } = props;\r\n    return(\r\n        <Grid item xs={12} lg= {12} md= {12}  sm= {12} style={{marginBottom:\"15px\"}}>\r\n            <TextField\r\n            name = {name}\r\n            onChange = {handleChange}\r\n            variant = \"outlined\"\r\n            required\r\n            fullWidth\r\n            label={label}\r\n            autoFocus={autoFocus}\r\n            type={type}\r\n            InputProps = {name === 'password' ? {\r\n                endAdorment:(\r\n                  <InputAdornment position=\"end\">\r\n                     <IconButton onClick={handleShowPassword}>\r\n                         {type ==='password'  ? <Visibility /> : <VisibilityOff/>}\r\n                     </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n            } : null}\r\n            />\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Input;","F:\\Git Proje\\mern-word\\client\\src\\components\\Auth\\iconGoogle.js",[],"F:\\Git Proje\\mern-word\\client\\src\\reducers\\auth.js",[],"F:\\Git Proje\\mern-word\\client\\src\\actions\\auth.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":24,"nodeType":"117","messageId":"118","endLine":4,"endColumn":31},{"ruleId":"115","severity":1,"message":"119","line":4,"column":33,"nodeType":"117","messageId":"118","endLine":4,"endColumn":37},{"ruleId":"115","severity":1,"message":"120","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":56,"column":8,"nodeType":"123","endLine":56,"endColumn":18,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":135,"column":1,"nodeType":"127","messageId":"128","endLine":148,"endColumn":19},{"ruleId":"115","severity":1,"message":"129","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"130","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":13},{"ruleId":"115","severity":1,"message":"131","line":16,"column":11,"nodeType":"117","messageId":"118","endLine":16,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":16,"column":83,"nodeType":"134","messageId":"135","endLine":16,"endColumn":85},{"ruleId":"115","severity":1,"message":"136","line":2,"column":13,"nodeType":"117","messageId":"118","endLine":2,"endColumn":17},{"ruleId":"115","severity":1,"message":"137","line":5,"column":9,"nodeType":"117","messageId":"118","endLine":5,"endColumn":32},{"ruleId":"115","severity":1,"message":"138","line":9,"column":12,"nodeType":"117","messageId":"118","endLine":9,"endColumn":23},{"ruleId":"115","severity":1,"message":"139","line":9,"column":25,"nodeType":"117","messageId":"118","endLine":9,"endColumn":39},{"ruleId":"115","severity":1,"message":"140","line":10,"column":21,"nodeType":"117","messageId":"118","endLine":10,"endColumn":30},{"ruleId":"115","severity":1,"message":"141","line":11,"column":11,"nodeType":"117","messageId":"118","endLine":11,"endColumn":19},{"ruleId":"115","severity":1,"message":"142","line":5,"column":9,"nodeType":"117","messageId":"118","endLine":5,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":3,"column":1,"nodeType":"145","endLine":12,"endColumn":2},{"ruleId":"115","severity":1,"message":"146","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":12},{"ruleId":"115","severity":1,"message":"147","line":2,"column":9,"nodeType":"117","messageId":"118","endLine":2,"endColumn":13},{"ruleId":"115","severity":1,"message":"148","line":4,"column":9,"nodeType":"117","messageId":"118","endLine":4,"endColumn":14},{"ruleId":"115","severity":1,"message":"149","line":6,"column":7,"nodeType":"117","messageId":"118","endLine":6,"endColumn":25},{"ruleId":"115","severity":1,"message":"142","line":2,"column":9,"nodeType":"117","messageId":"118","endLine":2,"endColumn":18},{"ruleId":"115","severity":1,"message":"150","line":2,"column":41,"nodeType":"117","messageId":"118","endLine":2,"endColumn":50},{"ruleId":"115","severity":1,"message":"151","line":7,"column":41,"nodeType":"117","messageId":"118","endLine":7,"endColumn":45},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'classes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logout' and 'user?.token'. Either include them or remove the dependency array.","ArrayExpression",["154"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useEffect' is defined but never used.","'words' is defined but never used.","'wordData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'XLSX' is defined but never used.","'uploadWordsCollectively' is defined but never used.","'uploadWords' is assigned a value but never used.","'setUploadWords' is assigned a value but never used.","'setHeader' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Container' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'logo' is defined but never used.","'Form' is defined but never used.","'green' is defined but never used.","'examplePlaceHolder' is assigned a value but never used.","'FormGroup' is defined but never used.","'half' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},"Update the dependencies array to be: [location, logout, user?.token]",{"range":"157","text":"158"},[1870,1880],"[location, logout, user?.token]"]